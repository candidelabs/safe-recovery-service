generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////////////////////////////////////////////////////

model RecoveryRequest {
  id           String   @id @default(uuid())
  emoji        String
  account      String
  chainId      Int
  newOwners    String[]
  newThreshold Int
  nonce        BigInt
  signatures   Json
  executeData  Json
  finalizeData Json
  status       String
  discoverable Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([account])
}

/////////////////////////////////////////////////////////////////////////

model AuthRegistration {
  id        String   @id @default(uuid())
  account   String
  chainId   Int
  channel   String
  target    String
  guardian  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([account])
}

model AuthRegistrationRequest {
  id            String    @id @default(uuid())
  account       String
  chainId       Int
  channel       String
  target        String
  challengeHash String
  verified      Boolean
  verifiedAt    DateTime?
  tries         Int
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([account])
}

model AuthRegistrationLogs {
  id        String   @id @default(uuid())
  account   String
  action    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////////////////////////////////////////////////////////

model AuthSignatureRequest {
  id                    String                         @id @default(uuid())
  account               String
  newOwners             String[]
  newThreshold          Int
  chainId               Int
  nonce                 BigInt
  channelVerifications  SignatureRequestVerification[]
  requiredVerifications Int
  guardian              String?
  signature             String?
  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt

  @@index([account])
}

model SignatureRequestVerification {
  id                     String               @id @default(uuid())
  channel                String
  target                 String
  challengeHash          String
  verified               Boolean
  verifiedAt             DateTime?
  tries                  Int
  expiresAt              DateTime
  authSignatureRequest   AuthSignatureRequest @relation(fields: [authSignatureRequestId], references: [id])
  authSignatureRequestId String
}

model AuthSignatureRequestLogs {
  id        String   @id @default(uuid())
  account   String
  action    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////////////////////////////////////////////////////////

model AlertSubscription {
  id            String    @id @default(uuid())
  account       String
  channel       String
  target        String
  active        Boolean
  challengeHash String
  verified      Boolean
  verifiedAt    DateTime?
  tries         Int
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([account])
}

model AlertLog {
  id        String   @id @default(uuid())
  account   String
  action    String
  event     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////////////////////////////////////////////////////////

model IndexerData {
  id                 String   @id @default(uuid())
  chainId            Int
  latestIndexedBlock Int
  active             Boolean
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model GuardianAddedEvent {
  id               String   @id @default(uuid())
  account          String
  chainId          Int
  guardian         String
  transactionHash  String
  blockNumber      Int
  transactionIndex Int
  logIndex         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model GuardianRevokedEvent {
  id               String   @id @default(uuid())
  account          String
  chainId          Int
  guardian         String
  transactionHash  String
  blockNumber      Int
  transactionIndex Int
  logIndex         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ThresholdChangedEvent {
  id               String   @id @default(uuid())
  account          String
  chainId          Int
  threshold        BigInt
  transactionHash  String
  blockNumber      Int
  transactionIndex Int
  logIndex         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model RecoveryExecutedEvent {
  id                     String   @id @default(uuid())
  account                String
  chainId                Int
  newThreshold           BigInt
  nonce                  BigInt
  executeAfter           BigInt
  guardiansApprovalCount BigInt
  transactionHash        String
  blockNumber            Int
  transactionIndex       Int
  logIndex               Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model RecoveryFinalizedEvent {
  id               String   @id @default(uuid())
  account          String
  chainId          Int
  newThreshold     BigInt
  nonce            BigInt
  transactionHash  String
  blockNumber      Int
  transactionIndex Int
  logIndex         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model RecoveryCanceledEvent {
  id               String   @id @default(uuid())
  account          String
  chainId          Int
  nonce            BigInt
  transactionHash  String
  blockNumber      Int
  transactionIndex Int
  logIndex         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum AlertDeliveryStatus {
  PENDING
  SENDING
  SENT
  FAILED
}

model AlertSubscriptionNotification {
  id             String              @id @default(uuid())
  account        String
  channel        String
  target         String
  data           Json
  deliveryStatus AlertDeliveryStatus
  sentAt         DateTime            @default(now())
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}
